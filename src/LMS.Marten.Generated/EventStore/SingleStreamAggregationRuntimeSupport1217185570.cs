// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamAggregationLiveAggregation1217185570
    public class SingleStreamAggregationLiveAggregation1217185570 : Marten.Events.Aggregation.SyncLiveAggregatorBase<LMS.Borrowing.Aggregate.MemberHoldRegister>
    {
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<LMS.Borrowing.Aggregate.MemberHoldRegister> _singleStreamAggregation;

        public SingleStreamAggregationLiveAggregation1217185570(Marten.Events.Aggregation.SingleStreamAggregation<LMS.Borrowing.Aggregate.MemberHoldRegister> singleStreamAggregation)
        {
            _singleStreamAggregation = singleStreamAggregation;
        }



        public override LMS.Borrowing.Aggregate.MemberHoldRegister Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, LMS.Borrowing.Aggregate.MemberHoldRegister snapshot)
        {
            if (!events.Any()) return null;
            LMS.Borrowing.Aggregate.MemberHoldRegister memberHoldRegister = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public LMS.Borrowing.Aggregate.MemberHoldRegister Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldRegisterInitiated> event_HoldRegisterInitiated1:
                    return LMS.Borrowing.Aggregate.MemberHoldRegister.Create(event_HoldRegisterInitiated1.Data);
                    break;
            }

            return new LMS.Borrowing.Aggregate.MemberHoldRegister();
        }


        public LMS.Borrowing.Aggregate.MemberHoldRegister Apply(Marten.Events.IEvent @event, LMS.Borrowing.Aggregate.MemberHoldRegister aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldPlaced> event_HoldPlaced2:
                    aggregate = aggregate.Apply(event_HoldPlaced2.Data);
                    break;
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldCanceled> event_HoldCanceled3:
                    aggregate = aggregate.Apply(event_HoldCanceled3.Data);
                    break;
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldReady> event_HoldReady4:
                    aggregate = aggregate.Apply(event_HoldReady4.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamAggregationLiveAggregation1217185570
    
    
    // START: SingleStreamAggregationInlineHandler1217185570
    public class SingleStreamAggregationInlineHandler1217185570 : Marten.Events.Aggregation.AggregationRuntime<LMS.Borrowing.Aggregate.MemberHoldRegister, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<LMS.Borrowing.Aggregate.MemberHoldRegister, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<LMS.Borrowing.Aggregate.MemberHoldRegister, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<LMS.Borrowing.Aggregate.MemberHoldRegister> _singleStreamAggregation;

        public SingleStreamAggregationInlineHandler1217185570(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<LMS.Borrowing.Aggregate.MemberHoldRegister, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<LMS.Borrowing.Aggregate.MemberHoldRegister, System.Guid> storage, Marten.Events.Aggregation.SingleStreamAggregation<LMS.Borrowing.Aggregate.MemberHoldRegister> singleStreamAggregation) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamAggregation = singleStreamAggregation;
        }



        public override async System.Threading.Tasks.ValueTask<LMS.Borrowing.Aggregate.MemberHoldRegister> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<LMS.Borrowing.Aggregate.MemberHoldRegister, System.Guid> slice, Marten.Events.IEvent evt, LMS.Borrowing.Aggregate.MemberHoldRegister aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldRegisterInitiated> event_HoldRegisterInitiated9:
                    aggregate = LMS.Borrowing.Aggregate.MemberHoldRegister.Create(event_HoldRegisterInitiated9.Data);
                    return aggregate;
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldPlaced> event_HoldPlaced6:
                    aggregate ??= new LMS.Borrowing.Aggregate.MemberHoldRegister();
                    aggregate = aggregate.Apply(event_HoldPlaced6.Data);
                    return aggregate;
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldReady> event_HoldReady8:
                    aggregate ??= new LMS.Borrowing.Aggregate.MemberHoldRegister();
                    aggregate = aggregate.Apply(event_HoldReady8.Data);
                    return aggregate;
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldCanceled> event_HoldCanceled7:
                    aggregate ??= new LMS.Borrowing.Aggregate.MemberHoldRegister();
                    aggregate = aggregate.Apply(event_HoldCanceled7.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public LMS.Borrowing.Aggregate.MemberHoldRegister Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<LMS.Borrowing.Events.HoldRegisterInitiated> event_HoldRegisterInitiated5:
                    return LMS.Borrowing.Aggregate.MemberHoldRegister.Create(event_HoldRegisterInitiated5.Data);
                    break;
            }

            return new LMS.Borrowing.Aggregate.MemberHoldRegister();
        }

    }

    // END: SingleStreamAggregationInlineHandler1217185570
    
    
}

